# check_dialog.py
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QPushButton, QComboBox, QTextEdit, QLabel, QHBoxLayout, QMessageBox
)
from PyQt6.QtCore import QObject, QThread, pyqtSignal, pyqtSlot

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏ –∑ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
from api_manager import ApiKeyManager
from translators import GoogleTranslator, DeepLTranslator

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π –∫–ª–∞—Å Worker, —â–æ —ñ –≤ main.py
class Worker(QObject):
    finished = pyqtSignal(object)
    def __init__(self, fn, *args, **kwargs):
        super().__init__()
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
    @pyqtSlot()
    def run(self):
        try:
            result = self.fn(*self.args, **self.kwargs)
            self.finished.emit(result)
        except Exception as e:
            self.finished.emit(e) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫

class ServiceCheckDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        self.setMinimumSize(500, 450)

        self.key_manager = ApiKeyManager()
        self.thread = None
        self.worker = None

        # --- UI Elements ---
        main_layout = QVBoxLayout(self)

        # –í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É
        service_layout = QHBoxLayout()
        service_layout.addWidget(QLabel("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:"))
        self.service_combo = QComboBox()
        for service_name in self.key_manager.data["services"].keys():
            self.service_combo.addItem(service_name.capitalize(), service_name)
        service_layout.addWidget(self.service_combo)
        main_layout.addLayout(service_layout)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—é—á
        self.active_key_label = QLabel()
        main_layout.addWidget(self.active_key_label)

        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        main_layout.addWidget(QLabel("–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–±—É–¥–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É):"))
        self.input_text = QTextEdit()
        self.input_text.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç—É—Ç...")
        self.input_text.setText("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
        main_layout.addWidget(self.input_text)

        self.check_button = QPushButton("üî¨ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏")
        main_layout.addWidget(self.check_button)

        main_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç:"))
        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        main_layout.addWidget(self.result_text)
        
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
        main_layout.addWidget(self.status_label)

        # --- Connections ---
        self.check_button.clicked.connect(self.run_check)
        self.service_combo.currentIndexChanged.connect(self.update_active_key_display)
        
        self.update_active_key_display() # –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    def mask_key(self, key):
        if not key: return "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        if len(key) < 8: return "****"
        return f"{key[:4]}...{key[-4:]}"

    def update_active_key_display(self):
        service = self.service_combo.currentData()
        if service == 'google':
            self.active_key_label.setText("‚ÑπÔ∏è –î–ª—è Google Translate API –∫–ª—é—á –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.")
            self.active_key_label.setStyleSheet("color: #888;")
        else:
            active_key = self.key_manager.get_active_key(service)
            self.active_key_label.setText(f"üîë –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—é—á: {self.mask_key(active_key)}")
            self.active_key_label.setStyleSheet("color: #ccc;")


    @pyqtSlot()
    def run_check(self):
        service = self.service_combo.currentData()
        text_to_check = self.input_text.toPlainText().strip()
        api_key = self.key_manager.get_active_key(service)

        if not text_to_check:
            self.result_text.setText("‚ùå –ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            return

        if service != 'google' and not api_key:
            self.result_text.setText(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –î–ª—è —Å–µ—Ä–≤—ñ—Å—É '{service.capitalize()}' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π API –∫–ª—é—á.")
            QMessageBox.warning(self, "–ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö API.")
            return

        self.check_button.setEnabled(False)
        self.status_label.setText("–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...")
        self.result_text.clear()

        self.thread = QThread()
        self.worker = Worker(self._translation_task, text_to_check, service, api_key)
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.on_check_finished)
        self.thread.start()

    def _translation_task(self, text, service, api_key):
        """–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
        translator = None
        if service == 'deepl':
            translator = DeepLTranslator(api_key)
        else: # google
            translator = GoogleTranslator()
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç
        result_batch = translator.translate_batch(
            items=[{'text': text}],
            src_lang='auto',
            dest_lang='EN-US' # –í–ò–ü–†–ê–í–õ–ï–ù–û: 'en' -> 'EN-US'
        )
        return result_batch[0]

    @pyqtSlot(object)
    def on_check_finished(self, result):
        if isinstance(result, Exception):
            self.status_label.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            self.result_text.setText(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:\n\n{result}")
        else:
            translated_text = result.get('translated', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥.')
            if "–ü–û–ú–ò–õ–ö–ê" in translated_text:
                 self.status_label.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            else:
                 self.status_label.setText("‚úÖ –£—Å–ø—ñ—Ö! –°–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î.")
            self.result_text.setText(translated_text)
            
        self.check_button.setEnabled(True)
        if self.thread:
            self.thread.quit()
            self.thread.wait()